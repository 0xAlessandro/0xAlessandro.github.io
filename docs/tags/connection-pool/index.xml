<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>connection pool on</title><link>https://0xAlessandro.github.io/tags/connection-pool/</link><description>Recent content in connection pool on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Sep 2025 14:39:47 +0200</lastBuildDate><atom:link href="https://0xAlessandro.github.io/tags/connection-pool/index.xml" rel="self" type="application/rss+xml"/><item><title>Twitter Chall</title><link>https://0xAlessandro.github.io/posts/twitter-chall/</link><pubDate>Mon, 15 Sep 2025 14:39:47 +0200</pubDate><guid>https://0xAlessandro.github.io/posts/twitter-chall/</guid><description>&amp;gt;
✏️ Edit (2025-09-18) Added explicit credit to @SharpEdged for explaining the connection‑pool origin‑ordering approach to me before. Also linked prior art by Salvatore Abello (posted 2025‑02‑27).
Acknowledgment: The core technique used here (leaking via connection‑pool origin ordering) was explained to me by @SharpEdged before. Prior art on pool ordering: Salvatore Abello, “CSS Exfiltration under default‑src &amp;lsquo;self&amp;rsquo;” (2025‑02‑27): https://blog.babelo.xyz/posts/css-exfiltration-under-default-src-self/#abusing-groupid-hash-ordering
Last week while browsing on X I stumbled upon this challenge.</description></item></channel></rss>